// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device-service.proto

/*
Package deviceservice is a generated protocol buffer package.

It is generated from these files:
	device-service.proto

It has these top-level messages:
	DeviceId
	Device
	Result
	GetDeviceResp
*/
package deviceservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeviceId) Reset()                    { *m = DeviceId{} }
func (m *DeviceId) String() string            { return proto.CompactTextString(m) }
func (*DeviceId) ProtoMessage()               {}
func (*DeviceId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Device struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type Result struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetDeviceResp struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Result *Result `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *GetDeviceResp) Reset()                    { *m = GetDeviceResp{} }
func (m *GetDeviceResp) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResp) ProtoMessage()               {}
func (*GetDeviceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetDeviceResp) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *GetDeviceResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceId)(nil), "deviceservice.DeviceId")
	proto.RegisterType((*Device)(nil), "deviceservice.Device")
	proto.RegisterType((*Result)(nil), "deviceservice.Result")
	proto.RegisterType((*GetDeviceResp)(nil), "deviceservice.GetDeviceResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error)
	RemoveDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error)
	GetDevice(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*GetDeviceResp, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/deviceservice.DeviceService/AddDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RemoveDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/deviceservice.DeviceService/RemoveDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDevice(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*GetDeviceResp, error) {
	out := new(GetDeviceResp)
	err := grpc.Invoke(ctx, "/deviceservice.DeviceService/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	AddDevice(context.Context, *Device) (*Result, error)
	RemoveDevice(context.Context, *Device) (*Result, error)
	GetDevice(context.Context, *DeviceId) (*GetDeviceResp, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.DeviceService/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.DeviceService/RemoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RemoveDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.DeviceService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevice(ctx, req.(*DeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deviceservice.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _DeviceService_AddDevice_Handler,
		},
		{
			MethodName: "RemoveDevice",
			Handler:    _DeviceService_RemoveDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceService_GetDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device-service.proto",
}

func init() { proto.RegisterFile("device-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xb7, 0x55, 0xab, 0x1d, 0xad, 0x87, 0x41, 0xb1, 0x94, 0x1e, 0x24, 0x27, 0x2f, 0xdb,
	0xc3, 0xea, 0x4d, 0x10, 0x5d, 0x17, 0x65, 0x6f, 0x4b, 0x7c, 0x82, 0xda, 0x0c, 0x4b, 0xc1, 0x6c,
	0x96, 0xa4, 0x2e, 0xe8, 0x63, 0xfa, 0x44, 0xd2, 0x24, 0x55, 0x5a, 0x7b, 0xf2, 0xd4, 0xe6, 0x9f,
	0x3f, 0x5f, 0xe6, 0x1f, 0x06, 0xce, 0x04, 0xed, 0xea, 0x8a, 0xa6, 0x86, 0x74, 0xfb, 0x2d, 0xb6,
	0x5a, 0x35, 0x0a, 0x13, 0xa7, 0x7a, 0x91, 0x65, 0x70, 0xb4, 0xb0, 0xc2, 0x52, 0xe0, 0x29, 0x84,
	0xb5, 0x48, 0x83, 0xcb, 0xe0, 0x2a, 0xe6, 0x61, 0x2d, 0xd8, 0x13, 0x44, 0xae, 0x36, 0xac, 0x20,
	0xc2, 0xfe, 0xa6, 0x94, 0x94, 0x86, 0x56, 0xb1, 0xff, 0x98, 0xc2, 0x61, 0xa5, 0xa4, 0xa4, 0x4d,
	0x93, 0xee, 0x59, 0xb9, 0x3b, 0xb2, 0x7b, 0x88, 0x38, 0x99, 0xf7, 0xb7, 0x06, 0x73, 0x88, 0x49,
	0x6b, 0xa5, 0x1f, 0x95, 0x20, 0x8b, 0x3b, 0xe0, 0xbf, 0x42, 0x4b, 0x90, 0x64, 0x4c, 0xb9, 0xee,
	0xc0, 0xdd, 0x91, 0x49, 0x48, 0x9e, 0xa9, 0x71, 0xcd, 0x70, 0x32, 0x5b, 0x9c, 0x42, 0xe4, 0x72,
	0x58, 0xca, 0xf1, 0xec, 0xbc, 0xe8, 0xc5, 0x2a, 0xbc, 0xd5, 0x9b, 0x5a, 0xbb, 0xb6, 0x1d, 0x58,
	0xf0, 0x5f, 0xbb, 0x6b, 0x8f, 0x7b, 0xd3, 0xec, 0x2b, 0x80, 0xc4, 0x11, 0x5e, 0x9c, 0x01, 0x6f,
	0x21, 0x7e, 0x10, 0xc2, 0x4f, 0x63, 0xfc, 0xb1, 0x6c, 0x1c, 0xca, 0x26, 0x78, 0x07, 0x27, 0x9c,
	0xa4, 0xda, 0xd1, 0x3f, 0xef, 0x2f, 0x20, 0xfe, 0x49, 0x8f, 0x17, 0xa3, 0x97, 0x97, 0x22, 0xcb,
	0x07, 0x85, 0xde, 0xc0, 0xd8, 0x64, 0x7e, 0x03, 0xb9, 0xd2, 0xeb, 0xa2, 0xd2, 0xe5, 0xe7, 0x47,
	0xa5, 0x04, 0xe9, 0xbe, 0x7f, 0x8e, 0xbd, 0xc4, 0xab, 0x76, 0x59, 0x56, 0xc1, 0x6b, 0x64, 0xb7,
	0xe6, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x97, 0x2f, 0x96, 0x50, 0x4d, 0x02, 0x00, 0x00,
}
